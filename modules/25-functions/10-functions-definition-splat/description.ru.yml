---
name: Упаковка аргументов функции
theory: |

  Splat-оператор в определениях функций позволяет «сворачивать» аргументы в массив. С его помощью создают функции, которые имеют бесконечное количество параметров:

  ```ruby
  def sum(*numbers)
    numbers.sum
  end

  # Параметры не обязательны
  sum() # 0
  sum(1) # 1
  sum(1, 10) # 11
  sum(1, 10, 8, 1) # 20
  ```

  Splat-оператор комбинируется с обычными параметрами. Например, если мы хотим требовать передачи как минимум одного параметра в функцию `sum()`, то для этого достаточно добавить обычный параметр:

  ```ruby
  def sum(number, *numbers)
    number + numbers.sum
  end

  sum() # ArgumentError
  sum(1) # 1
  ```

  Splat-оператор может встречаться в определении функции только один раз — и только в самом конце:

  ```ruby
  # Так не сработает
  sum(*numbers1, *numbers2)
  sum(*numbers, numbers)

  # А так сработает
  sum(number1, number2, *numbers)
  ```

instructions: |

  Реализуйте функцию `merge_all()`, которая принимает на вход любое количество хешей и сливает (мержит) их в один хеш, который возвращается наружу:

  ```ruby
  hash1 = { key: 'value' }
  hash2 = { key2: 'value2' }
  hash3 = { key3: 'value3', key: 'new value' }
  hash = merge_all(hash1, hash2, hash3)
  # { key: 'new value', key2: 'value2', key3: 'value3' }
  ```

  ## Подсказки

  * [merge()](https://ruby-doc.org/core-3.0.0/Hash.html#method-i-merge)

tips: []
